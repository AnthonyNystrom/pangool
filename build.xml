<project name="pangolin" default="build" xmlns:ivy="antlib:org.apache.ivy.ant"> 

    <property file="build.properties" />
	<!--property name="resolve.compile" value="true" /-->

	<property name="ivy.install.version" value="2.1.0" /> 
	<property name="ivy.dir" value="${basedir}/ivy" /> 
	<property name="ivy.jar.file" value="${ivy.dir}/ivy.jar" /> 
	
	<property name="thrift.gen.dir" value="gen-javabean" />
	<property name="thrift.dir" value="src/test/resources" />
		
	<property name="conf.dir" value="conf" />
    <property name="build.dir" value="build" /> 
    <property name="src.main.dir" value="src/main/java" />
	  <property name="src.contrib.dir" value="src/contrib/java"/>
	<property name="lib.dir" value="lib" />
	<property name="test.dir" value="src/test/java" />
	<property name="dist.dir" value="dist" />
	<property name="reports.dir" value="reports" />
    
	<property name="project.properties" value="${conf.dir}/project.properties" />
	<loadproperties srcfile="${project.properties}"/>
		
	<target name="build" depends="clean, resolve,compile-thrift,compile, test"/> 

	
    <target name="download-ivy" unless="skip.download"> 
    	<mkdir dir="${ivy.dir}"/> 
		<!-- download Ivy from web site so that it can be used even without any special installation --> 
		<echo message="installing ivy..."/> 
    	<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
    		 dest="${ivy.jar.file}" usetimestamp="true"/> 
    </target> 
    
    <!-- ================================= 
          target: install-ivy         
	        this target is not necessary if you put ivy.jar in your ant lib directory
	        if you already have ivy in your ant lib, you can simply remove this
	        target and the dependency the 'go' target has on it
         ================================= --> 
    <target name="install-ivy" depends="download-ivy" description="install ivy"> 
    	<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as the ivy jar is in at least one of ant's lib dir or 
    	      the local lib dir. --> 
    	<path id="ivy.lib.path"> 
    	    <pathelement location="${ivy.jar.file}"/> 
    	</path> 
    	<taskdef resource="org/apache/ivy/ant/antlib.xml"
    	          uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/> 
    </target>    
	
    <!-- ================================= 
          target: clean              
         ================================= --> 
    <target name="clean" description="--> clean the project"> 
        <delete includeemptydirs="true" quiet="true"> 
            <fileset dir="${build.dir}" /> 
    	</delete> 
    </target> 
	
    <!-- ================================= 
          target: clean-ivy              
         ================================= --> 
	<target name="clean-ivy" description="--> clean the ivy installation"> 
		<delete dir="${ivy.dir}"/> 
	</target> 
	
    <!-- ================================= 
          target: clean-cache              
         ================================= --> 
	<target name="clean-cache" depends="install-ivy" 
			description="--> clean the ivy cache"> 
		<ivy:cleancache /> 
	</target> 
	
    <!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" description="--> retrieve dependencies with ivy" depends="install-ivy">
        <delete includeemptydirs="true" quiet="true"> 
            <fileset dir="${lib.dir}" /> 
		</delete>
    	<ivy:resolve refresh="true" changing="true"/>
    	<ivy:retrieve/>
    </target>
	
	<!-- ================================= 
          classpath            
         ================================= -->
	<!-- define the common classpath for compiling and running stuff -->
	<path id="common.classpath">
		<pathelement path="${classpath}"/>
		<fileset dir="${lib.dir}" casesensitive="yes">
			<include name="**/*"/>
		</fileset>
		<pathelement location="${conf.dir}" />
	</path>

	<target name="check-cond" depends="install-ivy">
	  <!--condition property="cond-is-true">
	    <equals arg1="${resolve.compile}" arg2="true" />
	  </condition-->
	</target>

	<!--target name="resolve-compile" depends="check-cond" if="cond-is-true" >
	 <echo message="${cond-is-true}"/>
		<antcall target="resolve"/>
	</target-->
			
	<!-- ================================= 
          target: compile source            
         ================================= -->
	<target name="compile" description="compile the source code" depends="install-ivy">
		<!-- Compile the java code from ${src} into ${build} -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${src.main.dir}"/>
		<mkdir dir="${src.contrib.dir}"/>
		<mkdir dir="${test.dir}"/>
		<!--mkdir dir="${integration.dir}"/-->
		<mkdir dir="${thrift.gen.dir}"/>
		<javac srcdir="${src.main.dir}:${src.contrib.dir}:${test.dir}:${thrift.gen.dir}" destdir="${build.dir}" debug="on" encoding="UTF-8">
		
			
			<classpath refid="common.classpath"/>
		</javac>
	</target>

	<!-- ================================= 
          target: javadoc            
         ================================= -->
	<target name="javadoc" description="--> generate javadoc for the project">
	  <javadoc package="com.datasalt" sourcepath="${src.main.dir}" defaultexcludes="yes"
	           destdir="docs/api"
	           author="true"
	           version="true"
	           use="true"
	           windowtitle="${project.name}">
		<classpath refid="common.classpath"/>
        <doctitle><![CDATA[<h1>${project.name}</h1>]]></doctitle>
	    <bottom><![CDATA[<i>(c) Datasalt 2011</i>]]></bottom>
	  </javadoc>
	</target>
	
	<!-- ================================= 
          target: jar
         ================================= -->
	<target name="jar" description="create jar" depends="compile">
		<jar destfile="${jar.name}.jar" basedir="${build.dir}">
		    <manifest>
		      <attribute name="Main-Class" value="${main.class}"/>
		    </manifest>
		</jar>
	</target>
	
	
	<!-- ================================= 
          target: run something
         ================================= -->
	<target name="run" description="launch a java class" depends="compile">
		<java classname="${java.class}" fork="true" failonerror="true">
			<classpath>
				<pathelement location="${build.dir}"/>
			</classpath>
			<classpath refid="common.classpath"/>
			<arg line="${java.args}"/>
		</java>
	</target>
	
	<!-- ================================= 
	      target: unit test              
	     ================================= -->
	<target name="test" depends="compile">
		<mkdir dir="${reports.dir}"/>
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl"/>
	  		<classpath refid="common.classpath"/>
			<classpath>
				<pathelement location="${build.dir}"/>
				<pathelement location="${src.main.dir}"/>
				<pathelement location="${src.contrib.dir}"/>
			</classpath>
			<formatter type="plain"/>
		    <batchtest fork="yes" todir="${reports.dir}">
		    	<fileset dir="${test.dir}">
		      		<include name="**/Test*.java"/>
		      		<exclude name="**/AllTests.java"/>
		    		<exclude name="**/*.properties"/>
		    		<exclude name="**/*.xml"/>
		    	</fileset>
 		   </batchtest>
		</junit>
	</target>
	
	
	<!-- =================================
          target: publish release
         ================================= -->
    <target name="publish-release" description="--> publish this project in the ivy repository (RELEASE)">
    	<input
    	  message="Are you sure you want to publish a release? Releases are only published once. Release artifacts are not supposed to change. If you publish a release and regret, you won't be able to upload another release with the same name to Nexus. You'll have to login into the Nexus administration page and remove the artifact manually. If you are not ready to publish a release, you should publish a snapshot instead."
    	  validargs="y,n"
    	  addproperty="do.publish"
        />
    	<condition property="do.abort">
    	  <equals arg1="n" arg2="${do.publish}"/>
    	</condition>
    	<fail if="do.abort">Publish aborted by user.</fail>
		<property name="pub.revision" value="${project.revision}"/>
		<antcall target="publish">
			<param name="publish.repo" value="nexus-release"/>
		</antcall>   	
    </target>
	
    
	<!-- =================================
          target: publish snapshot
         ================================= -->
    <target name="publish-snapshot" description="publish this project in the ivy repository (SNAPSHOT)">
		<property name="pub.revision" value="${project.revision}-SNAPSHOT"/>
    	<antcall target="publish">
			<param name="publish.repo" value="nexus-snapshot"/>
		</antcall>   	
    </target>
	
	<target name="publish" depends="jar">
	       <delete file="${dist.dir}/ivy.xml"/>
	    	<ivy:resolve/>
	        <ivy:publish artifactspattern="[artifact].[ext]"
	                resolver="${publish.repo}"
	                pubrevision="${pub.revision}"
	                overwrite="true"
	        		update="true"
	        />
	        <echo message="project ${project.name} released with version ${project.revision}" />
	 </target>
	
	<!-- =================================
          target: package
         ================================= -->
	<target name="package" description="--> package this project into a ZIP file so it can be e.g. deployed to Azkaban" depends="jar">
		<zip destfile="pangolin-packaged.zip">
		    <zipfileset dir="conf/" includes="**/*" prefix="conf/"/>
		    <zipfileset dir="." includes="run_hadoop.sh"/>
		    <zipfileset dir="." includes="pangolin-dist.jar"/>
		    <zipfileset dir="lib/" includes="**/*" prefix="lib/"/>
			<!--zipfileset dir="azkaban/" includes="**/*" prefix="/"/-->
		</zip>
	</target>
		
		<!-- =================================
		          target: compile Thrift
		         ================================= -->
		  <target name="compile-thrift" description="--> Compile the Thrift classes to Java code">
		      <mkdir dir="${thrift.dir}"/> 
		        <delete includeemptydirs="true" quiet="true"> 
		        <fileset dir="${thrift.gen.dir}" /> 
		      </delete> 

		    <exec executable="thrift">
		      <arg value="-r" />
		      <arg value="--gen" />
		      <arg value="java:beans,hashcode,private-members" />
		      <arg value="${thrift.dir}/pangolin-test.thrift" />
		    </exec>   
		  </target> 

		
</project>
